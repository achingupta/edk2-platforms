/** @file
*  I/O Remapping Table (Iort)
*
*  Copyright (c) 2021, ARM Ltd. All rights reserved.
*
*  SPDX-License-Identifier: BSD-2-Clause-Patent
*
**/

#include <IndustryStandard/Acpi.h>
#include <IndustryStandard/Acpi62.h>
#include <IndustryStandard/IoRemappingTable.h>
#include "SgiAcpiHeader.h"

#pragma pack(1)

typedef struct
{
  EFI_ACPI_6_0_IO_REMAPPING_RC_NODE        RcNode;
  EFI_ACPI_6_0_IO_REMAPPING_ID_TABLE       RcIdMap[1];
} ARM_EFI_ACPI_6_0_IO_REMAPPING_RC_NODE;

typedef struct
{
  EFI_ACPI_6_0_IO_REMAPPING_TABLE              Header;
  ARM_EFI_ACPI_6_0_IO_REMAPPING_ITS_NODE       ItsNode0;
  ARM_EFI_ACPI_6_0_IO_REMAPPING_SMMU3_NODE     SmmuNode0;
  ARM_EFI_ACPI_6_0_IO_REMAPPING_RC_NODE        RcNode;
} ARM_EFI_ACPI_6_0_IO_REMAPPING_TABLE;

#pragma pack ()

ARM_EFI_ACPI_6_0_IO_REMAPPING_TABLE Iort =
{
  // EFI_ACPI_6_0_IO_REMAPPING_TABLE
  {
     ARM_ACPI_HEADER  // EFI_ACPI_DESCRIPTION_HEADER
     (
       EFI_ACPI_6_2_IO_REMAPPING_TABLE_SIGNATURE,
       ARM_EFI_ACPI_6_0_IO_REMAPPING_TABLE,
       EFI_ACPI_IO_REMAPPING_TABLE_REVISION
     ),
     3,  // NumNodes
     sizeof (EFI_ACPI_6_0_IO_REMAPPING_TABLE),  // NodeOffset
     0,  // Reserved
  },

  EFI_ACPI_ITS_NODE_INIT(0),

  EFI_ACPI_SMMUv3_NODE_INIT(0, 0),

  // ARM_EFI_ACPI_6_0_IO_REMAPPING_RC_NODE
  {
    // EFI_ACPI_6_0_IO_REMAPPING_RC_NODE
    {
      // EFI_ACPI_6_0_IO_REMAPPING_NODE
      {
        EFI_ACPI_IORT_TYPE_ROOT_COMPLEX,  // Type
        sizeof (ARM_EFI_ACPI_6_0_IO_REMAPPING_RC_NODE),  // Length
        1,  // Revision
        0,  // Reserved
        1,  // NumIdMappings
        OFFSET_OF (ARM_EFI_ACPI_6_0_IO_REMAPPING_RC_NODE, RcIdMap)  // IdReference
      },
      1,  // CacheCoherent
      0,  // AllocationHints
      0,  // Reserved
      0,  // MemoryAccessFlags
      EFI_ACPI_IORT_ROOT_COMPLEX_ATS_SUPPORTED,  // AtsAttribute
      0x0,                                       // PciSegmentNumber
      0x30,                                      // Memory address size limit
    },
    // EFI_ACPI_6_0_IO_REMAPPING_ID_TABLE
    {
      {
        PCI_RC_INPUT_BASE(0),      // InputBase
        (PCI_NUM_IDS_PER_RC - 1),  // NumIds
        PCI_RC_OUTPUT_BASE(0),     // OutputBase
        OFFSET_OF (ARM_EFI_ACPI_6_0_IO_REMAPPING_TABLE, SmmuNode0),  // OutputReference
        0,                         // Flags
      },
    }
  },

};

VOID* CONST ReferenceAcpiTable = &Iort;
