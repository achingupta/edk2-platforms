/** @file
*  I/O Remapping Table (Iort)
*
*  Copyright (c) 2021, ARM Ltd. All rights reserved.
*
*  SPDX-License-Identifier: BSD-2-Clause-Patent
*
**/

#include <IndustryStandard/Acpi.h>
#include <IndustryStandard/Acpi62.h>
#include <IndustryStandard/IoRemappingTable.h>
#include "SgiAcpiHeader.h"

#pragma pack(1)

typedef struct
{
  EFI_ACPI_6_0_IO_REMAPPING_RC_NODE        RcNode;
  EFI_ACPI_6_0_IO_REMAPPING_ID_TABLE       RcIdMap[4];
} ARM_EFI_ACPI_6_0_IO_REMAPPING_RC_NODE;

// SMMUv3 node for Named Component
typedef struct
{
  EFI_ACPI_6_0_IO_REMAPPING_SMMU3_NODE     SmmuNode;
  EFI_ACPI_6_0_IO_REMAPPING_ID_TABLE       SmmuIdMap[3];
} ARM_EFI_ACPI_6_0_IO_REMAPPING_SMMU3_NC_NODE;

typedef struct
{
  EFI_ACPI_6_0_IO_REMAPPING_NAMED_COMP_NODE  DmaNode;
  CONST CHAR8                                Name[16];
  EFI_ACPI_6_0_IO_REMAPPING_ID_TABLE         DmaIdMap[9];
} ARM_EFI_ACPI_6_0_IO_REMAPPING_DMA_NC_NODE;

typedef struct
{
  EFI_ACPI_6_0_IO_REMAPPING_TABLE              Header;
  ARM_EFI_ACPI_6_0_IO_REMAPPING_ITS_NODE       ItsNode0;
  ARM_EFI_ACPI_6_0_IO_REMAPPING_ITS_NODE       ItsNode1;
  ARM_EFI_ACPI_6_0_IO_REMAPPING_ITS_NODE       ItsNode2;
  ARM_EFI_ACPI_6_0_IO_REMAPPING_ITS_NODE       ItsNode3;
  ARM_EFI_ACPI_6_0_IO_REMAPPING_ITS_NODE       ItsNode4;
  ARM_EFI_ACPI_6_0_IO_REMAPPING_SMMU3_NODE     SmmuNode0;
  ARM_EFI_ACPI_6_0_IO_REMAPPING_SMMU3_NODE     SmmuNode1;
  ARM_EFI_ACPI_6_0_IO_REMAPPING_SMMU3_NODE     SmmuNode2;
  ARM_EFI_ACPI_6_0_IO_REMAPPING_SMMU3_NODE     SmmuNode3;
  ARM_EFI_ACPI_6_0_IO_REMAPPING_SMMU3_NC_NODE  SmmuNode4;
  ARM_EFI_ACPI_6_0_IO_REMAPPING_RC_NODE        RcNode;
  ARM_EFI_ACPI_6_0_IO_REMAPPING_DMA_NC_NODE    DmaNode0;
  ARM_EFI_ACPI_6_0_IO_REMAPPING_DMA_NC_NODE    DmaNode1;
} ARM_EFI_ACPI_6_0_IO_REMAPPING_TABLE;

#pragma pack ()

ARM_EFI_ACPI_6_0_IO_REMAPPING_TABLE Iort =
{
  // EFI_ACPI_6_0_IO_REMAPPING_TABLE
  {
     ARM_ACPI_HEADER  // EFI_ACPI_DESCRIPTION_HEADER
     (
       EFI_ACPI_6_2_IO_REMAPPING_TABLE_SIGNATURE,
       ARM_EFI_ACPI_6_0_IO_REMAPPING_TABLE,
       EFI_ACPI_IO_REMAPPING_TABLE_REVISION
     ),
     13,  // NumNodes
     sizeof (EFI_ACPI_6_0_IO_REMAPPING_TABLE),  // NodeOffset
     0,  // Reserved
  },

  EFI_ACPI_ITS_NODE_INIT(0),
  EFI_ACPI_ITS_NODE_INIT(1),
  EFI_ACPI_ITS_NODE_INIT(2),
  EFI_ACPI_ITS_NODE_INIT(3),
  EFI_ACPI_ITS_NODE_INIT(4),

  EFI_ACPI_SMMUv3_NODE_INIT(0, 0),
  EFI_ACPI_SMMUv3_NODE_INIT(1, 1),
  EFI_ACPI_SMMUv3_NODE_INIT(2, 2),
  EFI_ACPI_SMMUv3_NODE_INIT(3, 3),

  // SMMU
  {
    // EFI_ACPI_6_0_IO_REMAPPING_SMMU3_NODE
    {
      // EFI_ACPI_6_0_IO_REMAPPING_NODE
      {
        EFI_ACPI_IORT_TYPE_SMMUv3,                            // Type
        sizeof (ARM_EFI_ACPI_6_0_IO_REMAPPING_SMMU3_NC_NODE), // Length
        2,                                                    // Revision
        0,                                                    // Reserved
        3,                                                    // NumIdMapping
        OFFSET_OF (ARM_EFI_ACPI_6_0_IO_REMAPPING_SMMU3_NC_NODE, SmmuIdMap),  // IdReference
      },
      (FixedPcdGet32 (PcdSmmuBase) + (0x2000000 * 4)),  // Base address
      EFI_ACPI_IORT_SMMUv3_FLAG_COHAC_OVERRIDE,         // Flags
      0,                                                // Reserved
      0,                                                // VATOS address
      EFI_ACPI_IORT_SMMUv3_MODEL_GENERIC,               // SMMUv3 Model
      FixedPcdGet32 (PcdSmmuEventGsiv),                 // Event
      FixedPcdGet32 (PcdSmmuPriGsiv),                   // Pri
      FixedPcdGet32 (PcdSmmuGErrorGsiv),                // Gerror
      FixedPcdGet32 (PcdSmmuSyncGsiv),                  // Sync
      0,                                                // Proximity domain
      2,                                                // DevIDMappingIndex
    },
    // EFI_ACPI_6_0_IO_REMAPPING_ID_TABLE
    {
      EFI_ACPI_SMMUv3_ID_TABLE_INIT(DMA0_NC_SID_BASE, (FixedPcdGet32 (PcdIoVirtBlkDma0NumCh) + 1), 4),
      EFI_ACPI_SMMUv3_ID_TABLE_INIT(DMA1_NC_SID_BASE, (FixedPcdGet32 (PcdIoVirtBlkDma1NumCh) + 1), 4),

      {
        0x0,                                         // InputBase
        0x1,                                         // NumIds
        FixedPcdGet32 (PcdSmmuDevIDBase),            // OutputBase
        OFFSET_OF (ARM_EFI_ACPI_6_0_IO_REMAPPING_TABLE, ItsNode4), // OutputReference
        EFI_ACPI_IORT_ID_MAPPING_FLAGS_SINGLE,       // Flags
      },
    },
  },

  // ARM_EFI_ACPI_6_0_IO_REMAPPING_RC_NODE
  {
    // EFI_ACPI_6_0_IO_REMAPPING_RC_NODE
    {
      // EFI_ACPI_6_0_IO_REMAPPING_NODE
      {
        EFI_ACPI_IORT_TYPE_ROOT_COMPLEX,  // Type
        sizeof (ARM_EFI_ACPI_6_0_IO_REMAPPING_RC_NODE),  // Length
        1,  // Revision
        0,  // Reserved
        4,  // NumIdMappings
        OFFSET_OF (ARM_EFI_ACPI_6_0_IO_REMAPPING_RC_NODE, RcIdMap)  // IdReference
      },
      1,  // CacheCoherent
      0,  // AllocationHints
      0,  // Reserved
      0,  // MemoryAccessFlags
      EFI_ACPI_IORT_ROOT_COMPLEX_ATS_SUPPORTED,  // AtsAttribute
      0x0,                                       // PciSegmentNumber
      0x30,                                      // Memory address size limit
    },
    // EFI_ACPI_6_0_IO_REMAPPING_ID_TABLE
    {
      {
        PCI_RC_INPUT_BASE(0),      // InputBase
        (PCI_NUM_IDS_PER_RC - 1),  // NumIds
        PCI_RC_OUTPUT_BASE(0),     // OutputBase
        OFFSET_OF (ARM_EFI_ACPI_6_0_IO_REMAPPING_TABLE, SmmuNode0),  // OutputReference
        0,                         // Flags
      },
      {
        PCI_RC_INPUT_BASE(1),      // InputBase
        (PCI_NUM_IDS_PER_RC - 1),  // NumIds
        PCI_RC_OUTPUT_BASE(1),     // OutputBase
        OFFSET_OF (ARM_EFI_ACPI_6_0_IO_REMAPPING_TABLE, SmmuNode1),  // OutputReference
        0,                         // Flags
      },
      {
        PCI_RC_INPUT_BASE(2),      // InputBase
        (PCI_NUM_IDS_PER_RC - 1),  // NumIds
        PCI_RC_OUTPUT_BASE(2),     // OutputBase
        OFFSET_OF (ARM_EFI_ACPI_6_0_IO_REMAPPING_TABLE, SmmuNode2),  // OutputReference
        0,                         // Flags
      },
      {
        PCI_RC_INPUT_BASE(3),      // InputBase
        (PCI_NUM_IDS_PER_RC - 1),  // NumIds
        PCI_RC_OUTPUT_BASE(3),     // OutputBase
        OFFSET_OF (ARM_EFI_ACPI_6_0_IO_REMAPPING_TABLE, SmmuNode3),  // OutputReference
        0,                         // Flags
      },
    },
  },

  // ARM_EFI_ACPI_6_0_IO_REMAPPING_DMA_NC_NODE
  {
    // DMA named component node
    {
      {
        EFI_ACPI_IORT_TYPE_NAMED_COMP,                       // Type
        sizeof (ARM_EFI_ACPI_6_0_IO_REMAPPING_DMA_NC_NODE),  // Length
        2,                                                   // Revision
        0x0,                                                 // Reserved
        9,                                                   // NumIdMappings
        OFFSET_OF (ARM_EFI_ACPI_6_0_IO_REMAPPING_DMA_NC_NODE, DmaIdMap)  // IdReference
      },
      0x0,                                          // Flags
      0x1,                                          // CacheCoherent
      0x0,                                          // AllocationHints
      0x0,                                          // Reserved
      0x0,                                          // MemoryAccessFlags
      0x30,                                         // AddressSizeLimit
    },
    {
        "\\_SB_.DMA0"
    },
    // ID mapping table
    {
      EFI_ACPI_DMA_NC_ID_TABLE_INIT(0, 0, 4),  // Data Channel - 0
      EFI_ACPI_DMA_NC_ID_TABLE_INIT(0, 1, 4),  // Data Channel - 1
      EFI_ACPI_DMA_NC_ID_TABLE_INIT(0, 2, 4),  // Data Channel - 2
      EFI_ACPI_DMA_NC_ID_TABLE_INIT(0, 3, 4),  // Data Channel - 3
      EFI_ACPI_DMA_NC_ID_TABLE_INIT(0, 4, 4),  // Data Channel - 4
      EFI_ACPI_DMA_NC_ID_TABLE_INIT(0, 5, 4),  // Data Channel - 5
      EFI_ACPI_DMA_NC_ID_TABLE_INIT(0, 6, 4),  // Data Channel - 6
      EFI_ACPI_DMA_NC_ID_TABLE_INIT(0, 7, 4),  // Data Channel - 7
      EFI_ACPI_DMA_NC_ID_TABLE_INIT(0, 8, 4),  // Instruction channel
    },
  },

  // ARM_EFI_ACPI_6_0_IO_REMAPPING_DMA_NC_NODE
  {
    // DMA named component node
    {
      {
        EFI_ACPI_IORT_TYPE_NAMED_COMP,                       // Type
        sizeof (ARM_EFI_ACPI_6_0_IO_REMAPPING_DMA_NC_NODE),  // Length
        2,                                                   // Revision
        0x0,                                                 // Reserved
        9,                                                   // NumIdMappings
        OFFSET_OF (ARM_EFI_ACPI_6_0_IO_REMAPPING_DMA_NC_NODE, DmaIdMap)  // IdReference
      },
      0x0,                                          // Flags
      0x1,                                          // CacheCoherent
      0x0,                                          // AllocationHints
      0x0,                                          // Reserved
      0x0,                                          // MemoryAccessFlags
      0x30,                                         // AddressSizeLimit
    },
    {
        "\\_SB_.DMA1"
    },
    // ID mapping table
    {
      EFI_ACPI_DMA_NC_ID_TABLE_INIT(1, 0, 4),  // Data Channel - 0
      EFI_ACPI_DMA_NC_ID_TABLE_INIT(1, 1, 4),  // Data Channel - 1
      EFI_ACPI_DMA_NC_ID_TABLE_INIT(1, 2, 4),  // Data Channel - 2
      EFI_ACPI_DMA_NC_ID_TABLE_INIT(1, 3, 4),  // Data Channel - 3
      EFI_ACPI_DMA_NC_ID_TABLE_INIT(1, 4, 4),  // Data Channel - 4
      EFI_ACPI_DMA_NC_ID_TABLE_INIT(1, 5, 4),  // Data Channel - 5
      EFI_ACPI_DMA_NC_ID_TABLE_INIT(1, 6, 4),  // Data Channel - 6
      EFI_ACPI_DMA_NC_ID_TABLE_INIT(1, 7, 4),  // Data Channel - 7
      EFI_ACPI_DMA_NC_ID_TABLE_INIT(1, 8, 4),  // Instruction channel
    },
  },
};

VOID* CONST ReferenceAcpiTable = &Iort;
